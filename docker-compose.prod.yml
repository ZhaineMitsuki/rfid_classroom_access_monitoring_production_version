# docker-compose-prod.yml
version: '3'

services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-classroom_access_production}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app_network

  app:
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
    restart: always
    environment:
      - RAILS_ENV=production
      - RAILS_MAX_THREADS=5
      - WEB_CONCURRENCY=2
      - REDIS_URL_CACHING=redis://redis:6379/0
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@db:5432/${DB_NAME:-classroom_access_production}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - RAILS_SERVE_STATIC_FILES=true
    depends_on:
      - db
      - redis
    command: bundle exec rails server -e production -b 0.0.0.0 -p 3000
    volumes:
      - public-data:/usr/src/app/public
    networks:
      - app_network

  redis:
    image: redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - app_network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - public-data:/usr/share/nginx/html:ro
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app_network

volumes:
  db_data:
  redis_data:
  public-data:

networks:
  app_network:
    driver: bridge